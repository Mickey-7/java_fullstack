reference : https://www.callicoder.com/spring-boot-websocket-chat-example/

------------------------------------------------------------------------------------------------------------------------

WebSocket is a communication protocol that makes it possible to establish
a two-way communication channel between a server and a client.

WebSocket works by first establishing a regular HTTP connection with the server and
then upgrading it to a bidirectional websocket connection by sending an Upgrade header.

WebSocket is supported in most modern web browsers and for browsers that don’t support it,
we have libraries that provide fallbacks to other techniques like comet and long-polling.

Well, now that we know what websocket is and how it works, let’s jump into the implementation of our chat application.

------------------------------------------------------------------------------------------------------------------------

dependencies : WebSocket

------------------------------------------------------------------------------------------------------------------------

WebSocket Configuration
    The first step is to configure the websocket endpoint and message broker.
    Create a new package config inside com.example.websocketdemo package,
    then create a new class WebSocketConfig inside config package with the following contents -

    @Configuration
    @EnableWebSocketMessageBroker
    public class WebSocketConfig implements WebSocketMessageBrokerConfigurer {
        //alt + insert
        @Override
        public void registerStompEndpoints(StompEndpointRegistry registry) {
            registry.addEndpoint("/ws").withSockJS();
        }

        //alt + insert
        @Override
        public void configureMessageBroker(MessageBrokerRegistry registry) {
            registry.setApplicationDestinationPrefixes("/app");
            registry.enableSimpleBroker("/topic");

        }
    }

    The @EnableWebSocketMessageBroker is used to enable our WebSocket server.
    We implement WebSocketMessageBrokerConfigurer interface and provide
    implementation for some of its methods to configure the websocket connection.

    In the first method, we register a websocket endpoint that the clients
    will use to connect to our websocket server.

    Notice the use of withSockJS() with the endpoint configuration.
    SockJS is used to enable fallback options for browsers that don’t support websocket.

    You might have noticed the word STOMP in the method name.
    These methods come from Spring frameworks STOMP implementation.
    STOMP stands for Simple Text Oriented Messaging Protocol.
    It is a messaging protocol that defines the format and rules for data exchange.

    Why do we need STOMP? Well, WebSocket is just a communication protocol.
    It doesn’t define things like - How to send a message only to users who are subscribed to a particular topic,
    or how to send a message to a particular user. We need STOMP for these functionalities.

    In the second method, we’re configuring a message broker that
    will be used to route messages from one client to another.

    The first line defines that the messages whose destination starts with “/app”
    should be routed to message-handling methods (we’ll define these methods shortly).

    And, the second line defines that the messages whose destination
    starts with “/topic” should be routed to the message broker.
    Message broker broadcasts messages to all the connected clients who are subscribed to a particular topic.

    In the above example, We have enabled a simple in-memory message broker.
    But you’re free to use any other full-featured message broker like RabbitMQ or ActiveMQ.

------------------------------------------------------------------------------------------------------------------------

Creating the ChatMessage model
    ChatMessage model is the message payload that will be exchanged between the clients and the server.
    Create a new package model inside com.example.websocketdemo package,
    and then create the ChatMessage class inside model package with the following contents -

    public class ChatMessage {
        private MessageType type;
        private String content;
        private String sender;

        public enum MessageType{
            JOIN,LEAVE,CHAT
        }

        public MessageType getType() {
            return type;
        }

        public void setType(MessageType type) {
            this.type = type;
        }

        public String getContent() {
            return content;
        }

        public void setContent(String content) {
            this.content = content;
        }

        public String getSender() {
            return sender;
        }

        public void setSender(String sender) {
            this.sender = sender;
        }
    }

------------------------------------------------------------------------------------------------------------------------

Creating the Controller for sending and receiving messages
    We’ll define the message handling methods in our controller.
    These methods will be responsible for receiving messages from one client and then broadcasting it to others.

    Create a new package controller inside the base package and then
    create the ChatController class with the following contents -

    @Controller
    public class ChatController {
        @MessageMapping("/chat.sendMessage")
        @SendTo("/topic/public")
        public ChatMessage sendMessage(@Payload ChatMessage chatMessage){
            return chatMessage;
        }

        @MessageMapping("/chat.addUser")
        @SendTo("/topic/public")
        public ChatMessage addUser(@Payload ChatMessage chatMessage, SimpMessageHeaderAccessor headerAccessor){
            //Add username in web socket session
            headerAccessor.getSessionAttributes().put("username", chatMessage.getSender());
            return chatMessage;
        }

    }

    If you recall from the websocket configuration, all the messages sent from clients with a destination
    starting with /app will be routed to these message handling methods annotated with @MessageMapping.

    For example, a message with destination /app/chat.sendMessage will be routed to the sendMessage() method,
    and a message with destination /app/chat.addUser will be routed to the addUser() method.

------------------------------------------------------------------------------------------------------------------------

Adding WebSocket Event listeners
    We’ll use event listeners to listen for socket connect and disconnect events so that
    we can log these events and also broadcast them when a user joins or leaves the chat room -

    @Component
    public class WebSocketEventListener {
        private static final Logger logger = LoggerFactory.getLogger(WebSocketEventListener.class);

        @Autowired
        private SimpMessageSendingOperations messageSendingOperations;

        @EventListener
        public void handleWebSocketConnectListener(SessionConnectedEvent event){
            StompHeaderAccessor headerAccessor = StompHeaderAccessor.wrap(event.getMessage());

            String username = (String) headerAccessor.getSessionAttributes().get("username");
            if (username != null){
                logger.info("User Disconnected : "+username);

                ChatMessage chatMessage = new ChatMessage();
                chatMessage.setType(ChatMessage.MessageType.LEAVE);
                chatMessage.setSender(username);

                messageSendingOperations.convertAndSend("/topic/public", chatMessage);
            }

        }
    }

    We’re already broadcasting user join event in the addUser() method defined inside ChatController.
    So, we don’t need to do anything in the SessionConnected event.

    In the SessionDisconnect event, we’ve written code to extract the user’s name from the
    websocket session and broadcast a user leave event to all the connected clients.

------------------------------------------------------------------------------------------------------------------------

Creating the front-end
    Create the following folders and files inside src/main/resources directory -

    static
       └── js
           └── main.js
       └── index.html

    The src/main/resources/static folder is the default location for static files in Spring Boot.

------------------------------------------------------------------------------------------------------------------------

1. Creating the HTML - index.html
    The HTML file contains the user interface for displaying the chat messages.
    It includes sockjs and stomp javascript libraries.

    SockJS is a WebSocket client that tries to use native WebSockets and provides intelligent fallback
    options for older browsers that don’t support WebSocket. STOMP JS is the stomp client for javascript.

    Following is the complete code for index.html -

    <!DOCTYPE html>
    <html lang="en">
      <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>Spring Boot WebSocket Chat Applicatio</title>
      </head>
      <body>
        <noscript>
          <h3>Sorry! Your browser doesn't support Javascript</h3>
        </noscript>
        <!-- username registration -->
        <div>
          <h2>Type your username</h2>
          <!-- need to have id="usernameForm" as it is used on main.js as event listener -->
          <form id="usernameForm">
            <!-- need to have id="name" property as it is extracted on main.js connect() method -->
            <input type="text" id="name" placeholder="Username" />
            <button>
              Start Chatting
            </button>
          </form>
        </div>
        <!-- chat area -->
        <div>
          <div>
            <h3>Spring WebSocket Chat Demo</h3>
          </div>
          <!-- connected to onError() method on main.js -->
          <div class="connecting">
            Connecting...
          </div>
          <!-- message area -->
          <ul id="messageArea"></ul>
          <!-- message form -->
          <form id="messageForm">
            <!-- need to have id="message" property as it is extracted on main.js sendMessage() method -->
            <input type="text" id="message" placeholder="Type a message..." />
            <button>Send</button>
          </form>
        </div>

        <script src="https://cdnjs.cloudflare.com/ajax/libs/sockjs-client/1.1.4/sockjs.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/stomp.js/2.3.3/stomp.min.js"></script>
        <script src="/js/main.js"></script>
      </body>
    </html>


------------------------------------------------------------------------------------------------------------------------

2. JavaScript - main.js
    Let’s now add the javascript required for connecting to the websocket endpoint and sending & receiving messages.
    First, add the following code to the main.js file, and then we’ll explore some of the important methods in this file -

        var usernameForm = document.querySelector("#usernameForm");
        var messageForm = document.querySelector("#messageForm");
        var messageInput = document.querySelector("#message");
        var messageArea = document.querySelector("#messageArea");
        var connectingElement = document.querySelector(".connecting");

        var stompClient = null;
        var username = null;

        // Upon successful connection, the client subscribes to /topic/public destination and tells
        // the user’s name to the server by sending a message to the /app/chat.addUser destination.
        // snippet : func
        function onConnected() {
          // The stompClient.subscribe() function takes a callback method which
          // is called whenever a message arrives on the subscribed topic.
          // connected to the controller/ChatController on backend
          stompClient.subscribe("/topic/public", onMessageReceived);

          // connected to the controller/ChatController addUser() method on backend
          stompClient.send(
            "/app/chat.addUser",
            {},
            // can be seen on web browser devtools
            JSON.stringify({ sender: username, type: "JOIN" })
          );
        }

        // snippet : func
        function onError(error) {
          // connected to above connectingElement
          // will appear once server is disconnected
          connectingElement.textContent =
            "Could not connect to WebSocket server. Please refresh this page to try again";
          connectingElement.style.color = "red";
        }

        // The connect() function uses SockJS and stomp client to connect
        // to the /ws endpoint that we configured in Spring Boot.
        // snippet : func
        function connect(event) {
          // getting the username from input tag
          username = document.querySelector("#name").value.trim();
          if (username) {
            // connected to the configuration/WebSocketConfig registerStompEndpoints() method on backend
            var socket = new SockJS("/ws");
            stompClient = Stomp.over(socket);

            //.connect(destination node, output, input)
            stompClient.connect({}, onConnected, onError);
          }
          // prevent web page refresh
          event.preventDefault();
        }

        // snippet : func
        function onMessageReceived(payload) {
          var message = JSON.parse(payload.body);
          console.log(message);
          var messageElement = document.createElement("li");

          if (message.type === "JOIN") {
            message.content = message.sender + " joined";
          } else if (message.type === "LEAVE") {
            message.content = message.sender + " left";
          } else {
            var usernameElement = document.createElement("span");
            var usernameText = document.createTextNode(message.sender);
            // appending the sender on the created <span> tag
            usernameElement.appendChild(usernameText);
            // appending the sender on created <li> tag
            messageElement.appendChild(usernameElement);
            console.log("after if condition execution - now executing else condition");
          }

          var textElement = document.createElement("p");
          var messageText = document.createTextNode(message.content);
          // appending the message content on created <p> tag
          textElement.appendChild(messageText);
          // appending the <p> tag on <li> tag
          messageElement.appendChild(textElement);
          // appending the <li> tag on existing <ul> tag
          messageArea.appendChild(messageElement);
          // for scrolling
          messageArea.scrollTop = messageArea.scrollHeight;
        }

        // snippet : func
        function sendMessage(event) {
          // messageInput is a var from above
          var messageContent = messageInput.value.trim();
          if (messageContent && stompClient) {
            var chatMessage = {
              sender: username,
              content: messageInput.value,
              type: "CHAT",
            };
            // connected to the controller/ChatController sendMessage() method on backend
            // can be seend on web browser devtools
            stompClient.send("/app/chat.sendMessage", {}, JSON.stringify(chatMessage));
            // clear input message
            messageInput.value = "";
          }
          // prevent web page refresh
          event.preventDefault();
        }

        // connected to above usernameForm which is form tag on username registration (see comment) on index.html
        usernameForm.addEventListener("submit", connect, true);
        messageForm.addEventListener("submit", sendMessage, true);

        // data flow
        // connect()
        //   -> onError()
        //   -> onConnected()
        //       -> onMessageReceived()
        // sendMessage()

    The connect() function uses SockJS and stomp client to connect to the /ws endpoint that we configured in Spring Boot.

    Upon successful connection, the client subscribes to /topic/public destination and tells
    the user’s name to the server by sending a message to the /app/chat.addUser destination.

    The stompClient.subscribe() function takes a callback method which
    is called whenever a message arrives on the subscribed topic.

    Rest of the code is used to display and format the messages on the screen.

------------------------------------------------------------------------------------------------------------------------

error encountered:

    main.js:135 Uncaught TypeError: Cannot read property 'addEventListener' of null
        at main.js:135

    main.js : line 135

    135 : usernameForm.addEventListener("submit", connect, true);

    solution:

    need to have id="usernameForm" property on form tag of index.html

------------------------------------------------------------------------------------------------------------------------

check if socket is already running,
    on Postman, note that the /ws is the endpoint on config

    GET     http://localhost:8080/ws        SEND

    Postman Body response upon clicking SEND:

    Welcome to SockJS!

------------------------------------------------------------------------------------------------------------------------

